apply from: "../common.gradle"

buildscript {
    dependencies {
        classpath deps.classpath.dexCount
    }
}

apply plugin: "com.android.application"
apply plugin: "kotlin-android"
apply plugin: "kotlin-android-extensions"

androidExtensions {
    experimental = true
    features = [
            "parcelize"
    ]
}

android {
    compileSdkVersion compileSdk

    defaultConfig {
        applicationId "arcus.app"
        minSdkVersion minSdk
        targetSdkVersion targetSdk

        versionCode appVersionCode
        versionName "${version_major}.${version_minor}.${version_patch}-${version_reltype}+${gitShortHash().toLowerCase()}"
        renderscriptTargetApi rootProject.renderScriptTarget
        renderscriptSupportModeEnabled true

        // Enable for MultiDex support:
        multiDexEnabled true
        manifestPlaceholders = [
                devAppName: "Arcus [DBG]"
        ]
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // Setup Base URL values.
        def configurationFile = file("${rootProject.projectDir}/environment.gradle")
        String baseUrl = ""
        if (configurationFile.exists()) {
            apply from: configurationFile
        }

        if (project.hasProperty("arcusBasePlatformUrl")) {
            baseUrl = project.properties["arcusBasePlatformUrl"].toString()
        }

        buildConfigField("String", "ARCUS_BASE_PLATFORM_URL", "\"$baseUrl\"")
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }

        debug {
            minifyEnabled false

            applicationIdSuffix ".debug"
            crunchPngs false
        }
    }

    packagingOptions {
        pickFirst "META-INF/INDEX.LIST"
        pickFirst "META-INF/LICENSE.txt"
        pickFirst "META-INF/NOTICE.txt"
        pickFirst "LICENSE.txt"
        pickFirst "META-INF/io.netty.versions.properties"
    }

    dexOptions {
        javaMaxHeapSize "4g"
        keepRuntimeAnnotatedClasses false
    }

    signingConfigs {
        release {
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    lintOptions {
        // Fail builds if we have // STOPSHIP tags, only checked in release builds.
        // fatal "StopShip"
    }
}

dependencies {
    implementation fileTree(include: ["*.jar"], dir: "libs")

    implementation project(":cornea")
    implementation project(":analytics")
    implementation project(":presentation")
    implementation project(":materialEditText")

    implementation deps.appcompat
    implementation deps.annotations
    implementation deps.multiDex
    implementation deps.design
    implementation deps.constraintLayout
    implementation deps.androidLifecycle
    implementation deps.androidLifecycleCommon
    implementation deps.swipeRefreshLayout
    implementation(deps.androidCoreKtx)

    implementation deps.playServicesAuth
    implementation deps.playServicesGcm
    implementation deps.locationServices

    implementation deps.rx
    implementation deps.rxAndroid

    implementation deps.exoplayer_core
    implementation deps.exoplayer_ui
    implementation deps.exoplayer_hls

    implementation deps.kotlin

    implementation deps.eventBus
    implementation deps.gifDrawable
    implementation deps.dexaMaterialList
    implementation(deps.advRecyclerView) {
        transitive = true
    }

    implementation deps.picasso
    implementation deps.okhttp

    testImplementation deps.test.mockitoCore
    testImplementation deps.test.junit
    testImplementation deps.test.truth
    testImplementation deps.test.mockitoKotlin

    androidTestImplementation deps.multiDex
    androidTestImplementation deps.test.junit
    androidTestImplementation deps.test.androidTestRunner
    androidTestImplementation deps.test.androidTestRules
    androidTestImplementation deps.test.mockitoAndroid
}

if (project.hasProperty("dexcount") && Boolean.valueOf(project.dexcount)) {
    apply plugin: "com.getkeepsafe.dexcount"

    dexcount {
        includeClasses = false
        includeFieldCount = true
        orderByMethodCount = true
        verbose = false
    }
}
