/*
 *  Copyright 2019 Arcus Project.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package arcus.app.common.schedule.model;

import android.support.annotation.NonNull;

import arcus.cornea.utils.DayOfWeek;
import arcus.cornea.utils.TimeOfDay;

import java.util.Map;
import java.util.Set;


public interface ScheduleCommandModel {

    /**
     * Gets the scheduler group id that is used when constructing a scheduler command instance
     * name on the platform. All commands belonging to the same subsystem/function should use
     * the same group ID.
     * @return
     */
    @NonNull String getSchedulerGroupId ();

    /**
     * Gets the command that the scheduler will execute when this event fires; as of this writing,
     * the command will always be 'base:SetAttributes' except when enabling/disabling a rule which
     * uses 'rule:Enable' and 'rule:Disable', respectively.
     *
     * @return The command message type for this event.
     */
    @NonNull String getCommandMessageType ();

    /**
     * Sets the command that the scheduler will execute when this event fires.
     * See {@link #getCommandMessageType()}
     */
    void setCommandMessageType(String commandMessageType);

    /**
     * Gets the unique identifier representing this command. This value is generated by the platform
     * and should typically not be set or mutated by the user.
     *
     * @return The unique identifier representing this command.
     */
    String getId();

    /**
     * Sets the unique identifier representing this command. Typically set by the platform/controller,
     * most users should never set this value directly.
     *
     * @param id The unique identifier representing this command.
     */
    void setId(String id);

    /**
     * The set of days that this command should repeat on. This set will never be null and must
     * always contain at least one day.
     * @return The set of days on which this command repeats.
     */
    @NonNull Set<DayOfWeek> getDays();

    /**
     * Sets the days that this command should repeat on. This set may not be null nor empty.
     * @param repeatOnDays The set of days on which this command should repeat.
     */
    void setDays(@NonNull Set<DayOfWeek> repeatOnDays);

    /**
     * Gets the time of day at which this command should execute. Cannot be null.
     * @return The time of day at which this command executes.
     */
    @NonNull TimeOfDay getTime();

    /**
     * Sets the time of day at which this command executes. Cannot be null.
     * @param timeOfDay The time of day at which this command executes.
     */
    void setTime(@NonNull TimeOfDay timeOfDay);

    /**
     * Gets the map of command attributes (i.e., attributes that should change/fire as a result
     * of this command executing).
     *
     * Typically, concrete implementations will provide convenience methods to get and set this
     * value. For example, a LightSchedulerCommand might offer a setSwitchState method that
     * delegates to this method for adding the switch state attribute to the command.
     *
     * @return The command execution attributes.
     */
    Map<String,Object> getAttributes();

    /**
     * Sets the map of command attributes.
     * @param commandAttributes
     */
    void setAttributes(Map<String, Object> commandAttributes);

    /**
     * Gets an "abstract" string representing this command, typically a one-word expression
     * representing the outcome of the scheduler executing this command (i.e, for a switch command
     * the abstract might read "ON" or "OFF; for a door "OPEN" or "CLOSED".
     *
     * This value is typically displayed as right-justified text next to the chevron (>) in list
     * views.
     *
     * @return The abstract representation of this command.
     */
    String getCommandAbstract ();

}
