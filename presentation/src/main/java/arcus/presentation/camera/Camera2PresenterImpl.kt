/*
 *  Copyright 2019 Arcus Project.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package arcus.presentation.camera

import android.annotation.SuppressLint
import android.annotation.TargetApi
import android.app.Activity
import android.content.Context
import android.content.res.Configuration
import android.graphics.*
import android.hardware.camera2.*
import android.media.Image
import android.media.ImageReader
import android.os.Build
import android.os.Environment
import android.os.Handler
import android.os.HandlerThread
import android.util.Size
import android.util.SparseIntArray
import android.view.Display
import android.view.Surface
import arcus.cornea.presenter.KBasePresenter
import org.slf4j.LoggerFactory
import java.io.File
import java.io.FileOutputStream
import java.io.IOException
import java.text.SimpleDateFormat
import java.util.*
import java.util.concurrent.Semaphore
import java.util.concurrent.TimeUnit

@TargetApi(Build.VERSION_CODES.LOLLIPOP)
@SuppressLint("MissingPermission")  // Activity handles permission checks
class Camera2PresenterImpl(activity : Activity, private val textureView: AutoFitTextureView) : Camera2Presenter, KBasePresenter<CameraView>() {
    private val cameraManager = activity.getSystemService(Context.CAMERA_SERVICE) as CameraManager
    private var orientation : Int = 0
    private var defaultDisplay : Display
    init {
        orientation = activity.resources.configuration.orientation
        defaultDisplay = activity.windowManager.defaultDisplay
    }

    private var reload = false

    /**
     * A [Semaphore] to prevent the app from exiting before closing the camera.
     */
    private val cameraOpenCloseLock = Semaphore(1)

    /**
     * A reference to the opened [CameraDevice].
     */
    private var mCameraDevice: CameraDevice? = null

    /**
     * ID of the current [CameraDevice].
     */
    private lateinit var cameraId: String

    /**
     * This is the output file for our picture.
     */
    private lateinit var file: File

    /**
     * The capture result image
     */
    private lateinit var savingImage : Image

    /**
     * The current state of camera state for taking pictures.
     *
     * @see .captureCallback
     */
    private var state = STATE_PREVIEW

    /**
     * set camera zoom
     */
    private var zoomRect: Rect? = null

    /**
     * Whether the flash is on/off (default off)
     */
    private var flashMode = FLASH_OFF

    /**
     * Whether the current camera device supports Flash or not.
     */
    private var flashSupported = false

    /**
     * Track whether the camera is facing front or back (assume back)
     */
    private var cameraCurrentlyFacing = CAMERA_FACING_BACK

    /**
     * Orientation of the camera sensor
     */
    private var sensorOrientation = 0

    /**
     * The [android.util.Size] of camera preview.
     */
    private lateinit var previewSize: Size

    /**
     * [CaptureRequest.Builder] for the camera preview
     */
    private lateinit var previewRequestBuilder: CaptureRequest.Builder

    /**
     * [CaptureRequest] generated by [.previewRequestBuilder]
     */
    private lateinit var previewRequest: CaptureRequest

    /**
     * A [CameraCaptureSession] for camera preview.
     */
    private var captureSession: CameraCaptureSession? = null

    /**
     * capture sizes
     */
    private var supportedCaptureSizes: Array<Size>? = null
    private var currentCaptureSize: Size? = null

    /**
     * An [ImageReader] that handles still image capture.
     */
    private var imageReader: ImageReader? = null

    /**
     * An additional thread for running tasks that shouldn't block the UI.
     */
    private var backgroundThread: HandlerThread? = null

    /**
     * A [Handler] for running tasks in the background.
     */
    private var backgroundHandler: Handler? = null

    /**
     * [CameraDevice.StateCallback] is called when [CameraDevice] changes its state.
     */
    private val stateCallback = object : CameraDevice.StateCallback() {

        override fun onOpened(cameraDevice: CameraDevice) {
            cameraOpenCloseLock.release()
            mCameraDevice = cameraDevice
            createCameraPreviewSession()
        }

        override fun onDisconnected(cameraDevice: CameraDevice) {
            cameraOpenCloseLock.release()
            cameraDevice.close()
            mCameraDevice = null
        }

        override fun onError(cameraDevice: CameraDevice, error: Int) {
            onDisconnected(cameraDevice)
            onlyIfView { view ->
                view.onCameraFailedToOpen()
            }
        }
    }

    /**
     * A [CameraCaptureSession.CaptureCallback] that handles events related to JPEG capture.
     */
    private val captureCallback = object : CameraCaptureSession.CaptureCallback() {

        private fun process(result: CaptureResult) {
            when (state) {
                STATE_PREVIEW -> Unit // Do nothing when the camera preview is working normally.
                STATE_WAITING_LOCK -> capturePicture(result)
                STATE_WAITING_PRECAPTURE -> {
                    // CONTROL_AE_STATE can be null on some devices
                    val aeState = result.get(CaptureResult.CONTROL_AE_STATE)
                    if (aeState == null ||
                            aeState == CaptureResult.CONTROL_AE_STATE_PRECAPTURE ||
                            aeState == CaptureRequest.CONTROL_AE_STATE_FLASH_REQUIRED) {
                        state = STATE_WAITING_NON_PRECAPTURE
                    }
                }
                STATE_WAITING_NON_PRECAPTURE -> {
                    // CONTROL_AE_STATE can be null on some devices
                    val aeState = result.get(CaptureResult.CONTROL_AE_STATE)
                    if (aeState == null || aeState != CaptureResult.CONTROL_AE_STATE_PRECAPTURE) {
                        state = STATE_PICTURE_TAKEN
                        captureStillPicture()
                    }
                }
            }
        }

        private fun capturePicture(result: CaptureResult) {
            val afState = result.get(CaptureResult.CONTROL_AF_STATE)
            if (afState == null) {
                captureStillPicture()
            } else if (afState == CaptureResult.CONTROL_AF_STATE_FOCUSED_LOCKED
                    || afState == CaptureResult.CONTROL_AF_STATE_NOT_FOCUSED_LOCKED) {
                // CONTROL_AE_STATE can be null on some devices
                val aeState = result.get(CaptureResult.CONTROL_AE_STATE)
                if (aeState == null || aeState == CaptureResult.CONTROL_AE_STATE_CONVERGED) {
                    state = STATE_PICTURE_TAKEN
                    captureStillPicture()
                } else {
                    runPrecaptureSequence()
                }
            }
        }

        override fun onCaptureProgressed(session: CameraCaptureSession,
                                         request: CaptureRequest,
                                         partialResult: CaptureResult) {
            process(partialResult)
        }

        override fun onCaptureCompleted(session: CameraCaptureSession,
                                        request: CaptureRequest,
                                        result: TotalCaptureResult) {
            process(result)
        }
    }

    /**
     * This a callback object for the [ImageReader]. "onImageAvailable" will be called when a
     * still image is ready to be saved.
     */
    private val onImageAvailableListener = ImageReader.OnImageAvailableListener { imageReader ->
        savingImage = imageReader.acquireNextImage()
        backgroundHandler?.post(ImageSaver()).run {
            // If for some reason the screen is turned off after an image was saved, we just take a new photo
            if(!reload) {
                onlyIfView { view ->
                    view.onPictureSaveSuccess(file)
                }
                reload = true
            } else {
                unlockFocus()
            }
        }
    }

    /**
     * Creates a new [CameraCaptureSession] for camera preview.
     */
    private fun createCameraPreviewSession() {
        mCameraDevice?.let {camera ->
            try {
                val texture = textureView.surfaceTexture

                // We configure the size of default buffer to be the size of camera preview we want.
                texture.setDefaultBufferSize(previewSize.width, previewSize.height)

                // This is the output Surface we need to start preview.
                val surface = Surface(texture)

                // We set up a CaptureRequest.Builder with the output Surface.
                previewRequestBuilder = camera.createCaptureRequest(
                        CameraDevice.TEMPLATE_PREVIEW
                )
                previewRequestBuilder.addTarget(surface)

                // Here, we create a CameraCaptureSession for camera preview.
                camera.createCaptureSession(Arrays.asList(surface, imageReader?.surface),
                        object : CameraCaptureSession.StateCallback() {

                            override fun onConfigured(cameraCaptureSession: CameraCaptureSession) {
                                // When the session is ready, we start displaying the preview.
                                captureSession = cameraCaptureSession
                                try {
                                    // Auto focus should be continuous for camera preview.
                                    previewRequestBuilder.set(CaptureRequest.CONTROL_AF_MODE,
                                            CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE)

                                    setFlash(previewRequestBuilder)

                                    // Finally, display the camera preview
                                    captureSession?.setRepeatingRequest(previewRequest,
                                            captureCallback, backgroundHandler)
                                } catch (e: CameraAccessException) {
                                    logger.error(e.toString())
                                }
                            }

                            override fun onConfigureFailed(session: CameraCaptureSession) {
                                // TODO: what if we can't create a CameraCaptureSession for camera preview?
                                onlyIfView { view ->
                                    view.onCameraFailedToOpen()
                                }
                            }
                        }, null)
            } catch (ex: CameraAccessException) {
                logger.error(ex.toString())
            }
        } ?: return  // The camera is already closed
    }

    /**
     * Sets up member variables related to camera.
     *
     * @param width  The width of available size for camera preview
     * @param height The height of available size for camera preview
     */
    private fun setUpCameraOutputs(width: Int, height: Int) {
        try {
            for (cameraId in cameraManager.cameraIdList) {
                val characteristics = cameraManager.getCameraCharacteristics(cameraId)
                val facing = characteristics.get(CameraCharacteristics.LENS_FACING)
                if (facing == cameraCurrentlyFacing) {

                    val map = characteristics.get(
                            CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP
                    ) ?: continue

                    supportedCaptureSizes = map.getOutputSizes(ImageFormat.JPEG)
                    Arrays.sort(supportedCaptureSizes, CompareSizesByArea())


                    if (currentCaptureSize == null) {
                        // For still image captures, we use the largest available size.
                        currentCaptureSize = Collections.max(
                                Arrays.asList(*map.getOutputSizes(ImageFormat.JPEG)),
                                CompareSizesByArea())
                    }
                    currentCaptureSize?.let {
                        zoomRect = Rect(0, 0, it.width, it.height)

                        imageReader = ImageReader.newInstance(
                                it.width,
                                it.height,
                                ImageFormat.JPEG,
                                2).apply {
                            setOnImageAvailableListener(onImageAvailableListener, backgroundHandler)
                        }
                    }

                    // Find out if we need to swap dimension to get the preview size relative to sensor
                    // coordinate.
                    val displayRotation = defaultDisplay.rotation

                    sensorOrientation = characteristics.get(CameraCharacteristics.SENSOR_ORIENTATION)
                    val swappedDimensions = areDimensionsSwapped(displayRotation)

                    val displaySize = Point()
                    defaultDisplay.getSize(displaySize)
                    val rotatedPreviewWidth = if (swappedDimensions) height else width
                    val rotatedPreviewHeight = if (swappedDimensions) width else height
                    var maxPreviewWidth = if (swappedDimensions) displaySize.y else displaySize.x
                    var maxPreviewHeight = if (swappedDimensions) displaySize.x else displaySize.y

                    if (maxPreviewWidth > MAX_PREVIEW_WIDTH) maxPreviewWidth = MAX_PREVIEW_WIDTH
                    if (maxPreviewHeight > MAX_PREVIEW_HEIGHT) maxPreviewHeight = MAX_PREVIEW_HEIGHT

                    // Danger, W.R.! Attempting to use too large a preview size could  exceed the camera
                    // bus' bandwidth limitation, resulting in gorgeous previews but the storage of
                    // garbage capture data.
                    currentCaptureSize?.let {
                        previewSize = chooseOptimalSize(map.getOutputSizes(SurfaceTexture::class.java),
                                rotatedPreviewWidth, rotatedPreviewHeight,
                                maxPreviewWidth, maxPreviewHeight,
                                it)
                    }

                    // We fit the aspect ratio of TextureView to the size of preview we picked.
                    if (orientation == Configuration.ORIENTATION_LANDSCAPE) {
                        textureView.setAspectRatio(previewSize.width, previewSize.height)
                    } else {
                        textureView.setAspectRatio(previewSize.height, previewSize.width)
                    }

                    // Check if the flash is supported.
                    flashSupported =
                            characteristics.get(CameraCharacteristics.FLASH_INFO_AVAILABLE) == true

                    this.cameraId = cameraId

                    // We've found a viable camera and finished setting up member variables,
                    // so we don't need to iterate through other available cameras.
                    return
                }
            }
        } catch (e: CameraAccessException) {
            logger.error(e.toString())
        } catch (e: NullPointerException) {
            // Currently an NPE is thrown when the Camera2API is used but not supported on the
            // device this code runs.
            // TODO: handle this - maybe fallback to Camera1?
            onlyIfView { view ->
                view.onCameraFailedToOpen()
            }
        }
    }

    /**
     * Run the precapture sequence for capturing a still image. This method should be called when
     * we get a response in [.captureCallback] from [.lockFocus].
     */
    private fun runPrecaptureSequence() {
        try {
            // This is how to tell the camera to trigger.
            previewRequestBuilder.set(CaptureRequest.CONTROL_AE_PRECAPTURE_TRIGGER,
                    CaptureRequest.CONTROL_AE_PRECAPTURE_TRIGGER_START)
            // Tell #captureCallback to wait for the precapture sequence to be set.
            state = STATE_WAITING_PRECAPTURE
            captureSession?.capture(previewRequestBuilder.build(), captureCallback,
                    backgroundHandler)
        } catch (e: CameraAccessException) {
            logger.error(e.toString())
        }
    }

    /**
     * Capture a still picture. This method should be called when we get a response in
     * [.captureCallback] from  [.lockFocus].
     */
    private fun captureStillPicture() {
        try {
            if (mCameraDevice == null) return
            val rotation = defaultDisplay.rotation

            // This is the CaptureRequest.Builder that we use to take a picture.
            val captureBuilder = mCameraDevice?.createCaptureRequest(
                    CameraDevice.TEMPLATE_STILL_CAPTURE)?.apply {

                addTarget(imageReader?.surface)

                // Sensor orientation is 90 for most devices, or 270 for some devices (eg. Nexus 5X)
                // We have to take that into account and rotate JPEG properly.
                // For devices with orientation of 90, we return our mapping from ORIENTATIONS.
                // For devices with orientation of 270, we need to rotate the JPEG 180 degrees.
                set(CaptureRequest.JPEG_ORIENTATION,
                        (ORIENTATIONS.get(rotation) + sensorOrientation + 270) % 360)

                // Use the same AE and AF modes as the preview.
                set(CaptureRequest.CONTROL_AF_MODE,
                        CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE)
                set(CaptureRequest.SCALER_CROP_REGION, zoomRect)

                setFlash(this)
            }

            val captureCallback = object : CameraCaptureSession.CaptureCallback() {

                override fun onCaptureCompleted(session: CameraCaptureSession,
                                                request: CaptureRequest,
                                                result: TotalCaptureResult) {
                    // Reset the auto-focus trigger
                    previewRequestBuilder.set(CaptureRequest.CONTROL_AF_TRIGGER,
                            CameraMetadata.CONTROL_AF_TRIGGER_CANCEL)

                    captureSession?.capture(previewRequestBuilder.build(), null,
                            backgroundHandler)
                    reload = false
                }
            }

            captureSession?.apply {
                stopRepeating()
                abortCaptures()
                capture(captureBuilder?.build(), captureCallback, null)
            }

        } catch (ex: CameraAccessException) {
            logger.error(ex.toString())
        }
    }

    /**
     * Lock the focus as the first step for a still image capture.
     */
    private fun lockFocus() {
        try {
            // This is how to tell the camera to lock focus.
            previewRequestBuilder.set(CaptureRequest.CONTROL_AF_TRIGGER,
                    CameraMetadata.CONTROL_AF_TRIGGER_START)

            // Tell #captureCallback to wait for the lock.
            state = STATE_WAITING_LOCK

            captureSession?.capture(previewRequestBuilder.build(), captureCallback,
                    backgroundHandler)
        } catch (e: CameraAccessException) {
            e.printStackTrace()
        }

    }

    /**
     * Unlock the focus. This method should be called when still image capture sequence is
     * finished.
     */
    private fun unlockFocus() {
        try {
            // Reset the auto-focus trigger
            previewRequestBuilder.set(CaptureRequest.CONTROL_AF_TRIGGER,
                    CameraMetadata.CONTROL_AF_TRIGGER_CANCEL)

            captureSession?.capture(previewRequestBuilder.build(), captureCallback, backgroundHandler)

            // After this, the camera will go back to the normal state of preview.
            state = STATE_PREVIEW

            captureSession?.setRepeatingRequest(previewRequest, captureCallback,
                    backgroundHandler)
        } catch (e: CameraAccessException) {
            logger.error(e.toString())
        }
    }

    override fun openCamera() {
        setUpCameraOutputs(textureView.width, textureView.height)
        configureTransform(textureView.width, textureView.height)

        try {
            // wait for the camera to open - 2.5 seconds
            if(!cameraOpenCloseLock.tryAcquire(2500, TimeUnit.MILLISECONDS)){
                logger.error("Timed out waiting to lock camera.")
                // TODO: what do if this happens?
                onlyIfView { view ->
                    view.onCameraFailedToOpen()
                }
            }
            cameraManager.openCamera(cameraId, stateCallback, backgroundHandler)
        } catch (ex: CameraAccessException){
            logger.error("Error accessing the camera {}", ex)
        } catch (ex: InterruptedException){
            logger.error("Interrupted while trying to lock camera open", ex)
        }
    }

    /**
     * Closes the current [CameraDevice].
     */
    override fun releaseCamera() {
        try {
            cameraOpenCloseLock.acquire()
            captureSession?.close()
            captureSession = null
            mCameraDevice?.close()
            mCameraDevice = null
            imageReader?.close()
            imageReader = null
        } catch (e: InterruptedException) {
            throw RuntimeException("Interrupted while trying to lock camera closing.", e)
        } finally {
            cameraOpenCloseLock.release()
        }
    }

    override fun toggleCamera() {
        synchronized(CAMERA_LOCK){
            releaseCamera()
            openCamera()
        }
        unlockFocus()
    }

    override fun flipCamera() {
        cameraCurrentlyFacing = if(cameraCurrentlyFacing == CAMERA_FACING_BACK) {
            CAMERA_FACING_FRONT
        } else {
            CAMERA_FACING_BACK
        }
        toggleCamera()
    }

    override fun takePicture(){
        getOutputMediaFile()?.let {
            file = it
            if (CameraCharacteristics.LENS_FACING_FRONT == cameraCurrentlyFacing) {
                captureStillPicture()
            } else {
                lockFocus()
            }
        }
    }

    override fun retakePicture() {
        openCamera()
    }

    override fun toggleFlashState() {
        if(flashSupported) {
            flashMode = if (flashMode == FLASH_OFF) {
                FLASH_ON
            } else {
                FLASH_OFF
            }
            unlockFocus()
            setFlash(previewRequestBuilder)

            onlyIfView { view ->
                view.onFlashToggled(flashMode)
            }
        }
    }

    /** https://developer.android.com/reference/android/hardware/camera2/CaptureRequest#FLASH_MODE **/
    private fun setFlash(requestBuilder: CaptureRequest.Builder) {
        if (flashSupported) {
            when (flashMode) {
                FLASH_ON -> {
                    requestBuilder.set(CaptureRequest.CONTROL_AE_MODE, CameraMetadata.CONTROL_AE_MODE_ON_ALWAYS_FLASH)
                    requestBuilder.set(CaptureRequest.FLASH_MODE, CameraMetadata.FLASH_MODE_OFF)
                }
                FLASH_OFF -> requestBuilder.set(CaptureRequest.FLASH_MODE, CameraMetadata.FLASH_MODE_OFF)
            }

            // Build a new request because the current is immutable
            try {
                previewRequest = previewRequestBuilder.build()

                // Set new repeating request with our changed one
                captureSession?.setRepeatingRequest(previewRequest, captureCallback, null)
            } catch (ex : CameraAccessException){
                logger.error("Couldn't create a new request {}", ex)
            }
        }
    }

    /**
     * Configures the necessary [android.graphics.Matrix] transformation to `cameraTextureView`.
     * This method should be called after the camera preview size is determined in
     * setUpCameraOutputs and also the size of `cameraTextureView` is fixed.
     *
     * @param viewWidth  The width of `cameraTextureView`
     * @param viewHeight The height of `cameraTextureView`
     */
    override fun configureTransform(viewWidth: Int, viewHeight: Int) {
        val rotation = defaultDisplay.rotation
        val matrix = Matrix()
        val viewRect = RectF(0f, 0f, viewWidth.toFloat(), viewHeight.toFloat())
        val bufferRect = RectF(0f, 0f, previewSize.height.toFloat(), previewSize.width.toFloat())
        val centerX = viewRect.centerX()
        val centerY = viewRect.centerY()
        if (Surface.ROTATION_90 == rotation || Surface.ROTATION_270 == rotation) {
            bufferRect.offset(centerX - bufferRect.centerX(), centerY - bufferRect.centerY())
            matrix.setRectToRect(viewRect, bufferRect, Matrix.ScaleToFit.FILL)
            val scale = Math.max(
                    viewHeight.toFloat() / previewSize.height,
                    viewWidth.toFloat() / previewSize.width)
            matrix.postScale(scale, scale, centerX, centerY)
            matrix.postRotate((90 * (rotation - 2)).toFloat(), centerX, centerY)
        } else if (Surface.ROTATION_180 == rotation) {
            matrix.postRotate(180f, centerX, centerY)
        }
        textureView.setTransform(matrix)
    }

    /**
     * Determines if the dimensions are swapped given the phone's current rotation.
     *
     * @param displayRotation The current rotation of the display
     *
     * @return true if the dimensions are swapped, false otherwise.
     */
    private fun areDimensionsSwapped(displayRotation: Int): Boolean {
        var swappedDimensions = false
        when (displayRotation) {
            Surface.ROTATION_0, Surface.ROTATION_180 -> {
                if (sensorOrientation == 90 || sensorOrientation == 270) {
                    swappedDimensions = true
                }
            }
            Surface.ROTATION_90, Surface.ROTATION_270 -> {
                if (sensorOrientation == 0 || sensorOrientation == 180) {
                    swappedDimensions = true
                }
            }
            else -> {
                logger.error("Display rotation is invalid: $displayRotation")
            }
        }
        return swappedDimensions
    }

    /**
     * Given `choices` of `Size`s supported by a camera, choose the smallest one that
     * is at least as large as the respective texture view size, and that is at most as large as
     * the respective max size, and whose aspect ratio matches with the specified value. If such
     * size doesn't exist, choose the largest one that is at most as large as the respective max
     * size, and whose aspect ratio matches with the specified value.
     *
     * @param choices           The list of sizes that the camera supports for the intended
     *                          output class
     * @param textureViewWidth  The width of the texture view relative to sensor coordinate
     * @param textureViewHeight The height of the texture view relative to sensor coordinate
     * @param maxWidth          The maximum width that can be chosen
     * @param maxHeight         The maximum height that can be chosen
     * @param aspectRatio       The aspect ratio
     * @return The optimal `Size`, or an arbitrary one if none were big enough
     */
    private fun chooseOptimalSize(
            choices: Array<Size>,
            textureViewWidth: Int,
            textureViewHeight: Int,
            maxWidth: Int,
            maxHeight: Int,
            aspectRatio: Size
    ): Size {

        // Collect the supported resolutions that are at least as big as the preview Surface
        val bigEnough = ArrayList<Size>()
        // Collect the supported resolutions that are smaller than the preview Surface
        val notBigEnough = ArrayList<Size>()
        val w = aspectRatio.width
        val h = aspectRatio.height
        for (option in choices) {
            if (option.width <= maxWidth && option.height <= maxHeight &&
                    option.height == option.width * h / w) {
                if (option.width >= textureViewWidth && option.height >= textureViewHeight) {
                    bigEnough.add(option)
                } else {
                    notBigEnough.add(option)
                }
            }
        }

        // Pick the smallest of those big enough. If there is no one big enough, pick the
        // largest of those not big enough.
        return when {
            bigEnough.size > 0 -> Collections.min(bigEnough, CompareSizesByArea())
            notBigEnough.size > 0 -> Collections.max(notBigEnough, CompareSizesByArea())
            else -> {
                logger.error("Couldn't find any suitable preview size")
                choices[0]
            }
        }
    }


    /**
     * Starts a background thread and its [Handler].
     */
    private fun startBackgroundThread() {
        backgroundThread = HandlerThread("CameraBackground").also { it.start() }
        backgroundHandler = Handler(backgroundThread?.looper)
    }

    /**
     * Stops the background thread and its [Handler].
     */
    private fun stopBackgroundThread() {
        backgroundThread?.quitSafely()
        try {
            backgroundThread?.join()
            backgroundThread = null
            backgroundHandler = null
        } catch (e: InterruptedException) {
            logger.error(e.toString())
        }
    }

    /** Create a File for saving an image or video */
    private fun getOutputMediaFile() : File? {
        // Check that the SDCard is mounted
        if(Environment.MEDIA_MOUNTED == Environment.getExternalStorageState()) {

            // Specify the directory
            val mediaStorageDir = File(Environment.getExternalStorageDirectory(), "Arcus")

            // Create the storage directory if it does not exist
            if (!mediaStorageDir.exists()) {
                if (!mediaStorageDir.mkdirs()) {
                    logger.debug("Failed to create directory {} : $mediaStorageDir")
                }
            }

            // Create a media file name
            val timeStamp = SimpleDateFormat("yyyyMMdd_HHmmss").format(Date())
            return File(mediaStorageDir.path + File.separator +
                    "IMG_" + timeStamp + ".jpg")
        }
        return null
    }

    /**
     * Saves a JPEG [Image] into the specified [File].
     */
    private inner class ImageSaver : Runnable {

        override fun run() {
            val buffer = savingImage.planes[0].buffer
            val bytes = ByteArray(buffer.remaining())
            buffer.get(bytes)
            try {
                FileOutputStream(file).use {
                    it.write(bytes)
                }
            } catch (e: IOException) {
                e.printStackTrace()
            } finally {
                savingImage.close()
            }
        }
    }


    override fun setView(view: CameraView) {
        super.setView(view)
        startBackgroundThread()
    }

    override fun clearView() {
        super.clearView()
        stopBackgroundThread()
    }

    companion object {
        private val CAMERA_LOCK = Any()

        @JvmStatic
        private val logger = LoggerFactory.getLogger(Camera2PresenterImpl::class.java)
        private val ORIENTATIONS = SparseIntArray()
        init {
            ORIENTATIONS.append(Surface.ROTATION_0, 90)
            ORIENTATIONS.append(Surface.ROTATION_90, 0)
            ORIENTATIONS.append(Surface.ROTATION_180, 270)
            ORIENTATIONS.append(Surface.ROTATION_270, 180)
        }

        /**
         * Camera state: Showing camera preview.
         */
        private const val STATE_PREVIEW = 0

        /**
         * Camera state: Waiting for the focus to be locked.
         */
        private const val STATE_WAITING_LOCK = 1

        /**
         * Camera state: Waiting for the exposure to be precapture state.
         */
        private const val STATE_WAITING_PRECAPTURE = 2

        /**
         * Camera state: Waiting for the exposure state to be something other than precapture.
         */
        private const val STATE_WAITING_NON_PRECAPTURE = 3

        /**
         * Camera state: Picture was taken.
         */
        private const val STATE_PICTURE_TAKEN = 4
    }


    /**
     * Compares two `Size`s based on their areas.
     */
    internal class CompareSizesByArea : Comparator<Size> {

        override fun compare(lhs: Size, rhs: Size): Int {
            // We cast here to ensure the multiplications won't overflow
            return java.lang.Long.signum(lhs.width.toLong() * lhs.height - rhs.width.toLong() * rhs.height)
        }

    }
}